import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

# Load the MNIST dataset
(X_train, y_train), (X_test, y_test) = mnist.load_data()

# Preprocess the data
X_train = X_train / 255.0  # Normalize pixel values to be between 0 and 1
X_test = X_test / 255.0    # Normalize test data as well

# Convert labels to one-hot encoding
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Build the Feedforward Neural Network model
model = Sequential([
    Flatten(input_shape=(28, 28)),         # Flatten the 28x28 images to a 784-dimensional vector
    Dense(128, activation='relu'),         # First hidden layer with 128 neurons
    Dense(64, activation='relu'),          # Second hidden layer with 64 neurons
    Dense(10, activation='softmax')        # Output layer with 10 neurons (one for each digit)
])

# Compile the model
model.compile(optimizer='adam', 
              loss='categorical_crossentropy', 
              metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=5, batch_size=32, validation_split=0.2)

# Evaluate the model on the test set
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test accuracy: {test_accuracy * 100:.2f}%")
